from telegram.ext import ContextTypes
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime
from typing import Dict
import logging
from managers.channel_manager import ChannelManager
from managers.event_manager import EventManager
from telegram.ext import  ContextTypes
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime
from typing import Dict, List, Optional
from utils.date_utils import DateUtils

logger = logging.getLogger(__name__)

class EventHandlers:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–∞"""
    def __init__(self, calendar, data_manager, channel_manager, event_manager):
        self.calendar = calendar
        self.data_manager = data_manager
        self.channel_manager = channel_manager
        self.event_manager = event_manager
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        await update.message.reply_text(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è–º–∏ –∫–∞–Ω–∞–ª–æ–≤.\n\n"
            "üóìÔ∏è –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/addevent - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ\n"
            "/events - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Å–æ–±—ã—Ç–∏—è\n"
            "/deleteevent - –£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ\n"
            "/mychannels - –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –∫–∞–Ω–∞–ª—ã\n\n"
            "/checkperms - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –≤–∞—à–∏—Ö –∫–∞–Ω–∞–ª–∞—Ö"
            "üì¢ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—è–º –∫–∞–Ω–∞–ª–æ–≤ –∏ –≥—Ä—É–ø–ø,"
            "–≤ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã —Å–æ—Å—Ç–æ–∏—Ç–µ!\n\n"
            "‚è∞ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–æ–±—ã—Ç–∏–∏ –≤ –∫–∞–Ω–∞–ª –∏ –∑–∞–∫—Ä–µ–ª—è–µ—Ç –µ–≥–æ!"
        )

    async def check_permissions_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–∞—Ö"""
        user_id = str(update.effective_user.id)
        
        user_channels = await self.channel_manager.get_user_channels(user_id, context.bot)
        
        if not user_channels:
            await update.message.reply_text("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –æ–±—â–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ —Å –±–æ—Ç–æ–º.")
            return
        
        response = "üîê **–ü—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –≤–∞—à–∏—Ö –∫–∞–Ω–∞–ª–∞—Ö:**\n\n"
        
        for channel_id, channel_info in user_channels.items():
            permissions = await ChannelManager.check_bot_permissions(channel_id, context.bot)
            
            status_icon = "‚úÖ" if permissions['can_send_messages'] else "‚ùå"
            pin_status = "‚úÖ" if permissions['can_pin_messages'] else "‚ùå"
            admin_status = "‚úÖ" if permissions['is_administrator'] else "‚ùå"
            
            response += f"**{channel_info['name']}**\n"
            response += f"  üìù –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: {status_icon}\n"
            response += f"  üìå –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {pin_status}\n"
            response += f"  üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {admin_status}\n\n"
        
        response += "üí° **–î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –±–æ—Ç—É –Ω—É–∂–Ω—ã:**\n"
        response += "‚Ä¢ –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n‚Ä¢ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        response += "‚Ä¢ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π"
        
        await update.message.reply_text(response, parse_mode='Markdown')

    async def add_event_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
        user_id = str(update.effective_user.id)
        
        user_channels = await self.channel_manager.get_user_channels(user_id, context.bot)
        
        if not user_channels:
            await update.message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –æ–±—â–∏—Ö –∫–∞–Ω–∞–ª–æ–≤/–≥—Ä—É–ø–ø —Å –±–æ—Ç–æ–º.\n\n"
                "üí° –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:\n"
                "1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É\n"
                "2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —Ç–æ–∂–µ —É—á–∞—Å—Ç–Ω–∏–∫ —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã\n"
                "3. –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∏—Ç –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É!\n\n"
                "üìã –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /mychannels —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã."
            )
            return
        
        context.user_data['user_channels'] = user_channels
        context.user_data['mode'] = 'adding'
        
        if len(user_channels) > 1:
            keyboard = []
            for chat_id, channel_info in user_channels.items():
                channel_name = channel_info['name']
                keyboard.append([InlineKeyboardButton(channel_name, callback_data=f"select_channel_{chat_id}")])
            
            await update.message.reply_text("üì¢ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —Å–æ–±—ã—Ç–∏—è:", reply_markup=InlineKeyboardMarkup(keyboard))
            context.user_data['waiting_for_channel_selection'] = True
        else:
            chat_id = list(user_channels.keys())[0]
            context.user_data['selected_channel'] = chat_id
            await self._show_calendar(update, context)
    
    async def _show_calendar(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å"""
        markup = self.calendar.create_calendar()
        
        if update.callback_query:
            await update.callback_query.message.reply_text("üóìÔ∏èÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è:", reply_markup=markup)
        else:
            await update.message.reply_text("üóìÔ∏èÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è:", reply_markup=markup)
    
    async def _handle_channel_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞"""
        query = update.callback_query
        await query.answer()
        
        if query.data.startswith("select_channel_"):
            chat_id = query.data.replace("select_channel_", "")
            user_id = str(query.from_user.id)
            
            user_channels = context.user_data.get('user_channels', {})
            if chat_id not in user_channels:
                await query.edit_message_text("‚ùå –≠—Ç–æ—Ç –∫–∞–Ω–∞–ª –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
                return
            
            channel_name = user_channels[chat_id]['name']
            
            context.user_data['selected_channel'] = chat_id
            await query.edit_message_text(f"üì¢ –í—ã–±—Ä–∞–Ω –∫–∞–Ω–∞–ª: {channel_name}")
            await self._show_calendar(update, context)
    
    async def handle_calendar_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –æ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        if data.startswith("select_channel_"):
            await self._handle_channel_selection(update, context)
            return
            
        mode = context.user_data.get('mode', 'adding')
        
        if mode == 'deleting':
            await self._handle_delete_calendar_callback(update, context)
        else:
            await self._handle_add_calendar_callback(update, context)
    
    async def _handle_add_calendar_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π"""
        query = update.callback_query
        data = query.data
        
        if data.startswith("calendar_day_") or data == "calendar_today":
            await self._handle_date_selection(update, context)
        elif data.startswith("calendar_nav_"):
            await self._handle_calendar_navigation(update, context)
        elif data.startswith("event_type_"):
            await self._handle_event_type_selection(update, context)
        elif data == "event_cancel":
            await self._handle_event_cancel(update, context)
    
    async def _handle_date_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã"""
        query = update.callback_query
        
        if query.data == "calendar_today":
            date_obj = datetime.now()
        else:
            date_str = query.data.replace("calendar_day_", "")
            date_obj = datetime.strptime(date_str, "%Y-%m-%d")
        
        formatted_date = date_obj.strftime("%d.%m.%Y")
        date_str = date_obj.strftime("%Y-%m-%d")
        
        user_id = str(query.from_user.id)
        user_channels = context.user_data.get('user_channels', {})
        channel_id = context.user_data.get('selected_channel')
        
        channel_name = user_channels.get(channel_id, {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        
        await query.edit_message_text(f"üóìÔ∏è –í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {formatted_date}\nüì¢ –ö–∞–Ω–∞–ª: {channel_name}")
        
        context.user_data['selected_date'] = date_str
        context.user_data['waiting_for_event_description'] = True
        
        keyboard = [
            [
                InlineKeyboardButton("üîπ –†–∞–∑–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ", callback_data="event_type_single"),
                InlineKeyboardButton("üî∏ –ï–∂–µ–≥–æ–¥–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ", callback_data="event_type_yearly")
            ],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="event_cancel")]
        ]
        
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text=f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è {formatted_date} –≤ –∫–∞–Ω–∞–ª–µ '{channel_name}':",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    async def _handle_calendar_navigation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—é"""
        query = update.callback_query
        nav_data = query.data.replace("calendar_nav_", "")
        year, month = map(int, nav_data.split("_"))
        markup = self.calendar.create_calendar(year, month)
        await query.edit_message_reply_markup(reply_markup=markup)
    
    async def _handle_event_type_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è"""
        query = update.callback_query
        await query.answer()
        
        event_type = query.data.replace("event_type_", "")
        context.user_data['event_type'] = event_type
        
        type_text = "üîπ —Ä–∞–∑–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ" if event_type == "single" else "üî∏ –µ–∂–µ–≥–æ–¥–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ"
        
        context.user_data['waiting_for_event_description'] = True
        
        await query.edit_message_text(f"‚úÖ –í—ã–±—Ä–∞–Ω —Ç–∏–ø: {type_text}\nüìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:")
    
    async def _handle_event_cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Å–æ–±—ã—Ç–∏—è"""
        query = update.callback_query
        await query.edit_message_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        self.clear_event_context(context)
    
    async def handle_event_description(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
        user_id = str(update.effective_user.id)
        
        if update.message.text.lower() in ['–æ—Ç–º–µ–Ω–∞', 'cancel', '—Å—Ç–æ–ø', 'stop']:
            await update.message.reply_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            self.clear_event_context(context)
            return
        
        if context.user_data.get('waiting_for_event_description') and 'selected_date' in context.user_data:
            description = update.message.text
            date_str = context.user_data['selected_date']
            channel_id = context.user_data.get('selected_channel')
            event_type = context.user_data.get('event_type', 'single')
            
            if not channel_id:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –∫–∞–Ω–∞–ª –Ω–µ –≤—ã–±—Ä–∞–Ω.")
                self.clear_event_context(context)
                return
            
            success = await self._save_event(description, date_str, channel_id, event_type, user_id, context.bot)
            
            if success:
                date_obj = datetime.strptime(date_str, "%Y-%m-%d")
                formatted_date = date_obj.strftime("%d.%m.%Y")
                
                user_channels = context.user_data.get('user_channels', {})
                channel_name = user_channels.get(channel_id, {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª')
                
                if event_type == 'yearly':
                    response = f"‚úÖ –ï–∂–µ–≥–æ–¥–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\nüóìÔ∏èÔ∏è –î–∞—Ç–∞: {formatted_date} (–µ–∂–µ–≥–æ–¥–Ω–æ)\nüì¢ –ö–∞–Ω–∞–ª: {channel_name}\nüìù –°–æ–±—ã—Ç–∏–µ: {description}"
                else:
                    response = f"‚úÖ –°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\nüóìÔ∏èÔ∏è –î–∞—Ç–∞: {formatted_date}\nüì¢ –ö–∞–Ω–∞–ª: {channel_name}\nüìù –°–æ–±—ã—Ç–∏–µ: {description}"
                
                await update.message.reply_text(response)
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è.")
            
            self.clear_event_context(context)
    
    async def _save_event(self, description: str, date_str: str, channel_id: str, event_type: str, user_id: str, bot) -> bool:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π"""
        success, channel_title, _ = await self.channel_manager.get_channel_info(channel_id, bot)
        if not success:
            return False
        
        events = self.data_manager.load_events()
        event_id = self.event_manager.create_event_id()
        
        event_data = {
            'id': event_id,
            'description': description,
            'created_by': user_id,
            'channel_id': channel_id,
            'channel_name': channel_title,
            'created_at': datetime.now().isoformat(),
            'notified': False,
            'pinned_message_id': None,
            'pinned_date': None,
            'event_type': event_type,
            'original_date': date_str,
            'last_notified_year': None
        }
        
        success = EventManager.add_event_to_storage(events, event_data)
        if success:
            return self.data_manager.save_events(events)
        return False
    
    async def events_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–±—ã—Ç–∏—è"""
        user_id = str(update.effective_user.id)
        events = self.data_manager.load_events()
        
        if not events:
            await update.message.reply_text("üì≠ –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π.")
            return
        
        user_channels = await self.channel_manager.get_user_channels(user_id, context.bot)
        
        if not user_channels:
            await update.message.reply_text("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –æ–±—â–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ —Å –±–æ—Ç–æ–º.")
            return
        
        context.user_data['user_channels'] = user_channels
        
        if len(user_channels) > 1 and not context.args:
            keyboard = []
            for chat_id, channel_info in user_channels.items():
                channel_name = channel_info['name']
                keyboard.append([InlineKeyboardButton(f"üì¢ {channel_name}", callback_data=f"view_events_{chat_id}")])
            
            keyboard.append([InlineKeyboardButton("üëÅÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–æ–±—ã—Ç–∏—è", callback_data="view_events_all")])
            await update.message.reply_text("üì¢ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–±—ã—Ç–∏–π:", reply_markup=InlineKeyboardMarkup(keyboard))
            return
        
        channel_id_to_show = None
        if context.args:
            channel_arg = context.args[0]
            normalized_id = self.channel_manager.normalize_chat_id(channel_arg)
            if normalized_id in user_channels:
                channel_id_to_show = normalized_id
        elif len(user_channels) == 1:
            channel_id_to_show = list(user_channels.keys())[0]
        
        if channel_id_to_show:
            await self._show_events_for_channel(update, context, channel_id_to_show, user_channels)
        else:
            await self._show_all_events(update, context, user_channels)
    
    async def _show_events_for_channel(self, update: Update, context: ContextTypes.DEFAULT_TYPE, channel_id: str, user_channels: Dict):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
        response = await self._build_events_response(user_channels, context.bot, show_all=False, channel_id=channel_id)
        await update.message.reply_text(response, parse_mode='Markdown')
    
    async def _show_all_events(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_channels: Dict):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–æ–±—ã—Ç–∏—è"""
        response = await self._build_events_response(user_channels, context.bot, show_all=True)
        keyboard = await self._build_channels_keyboard(user_channels, context.bot, current_channel=None)
        
        if isinstance(update, Update) and update.message:
            if keyboard:
                await update.message.reply_text(response, reply_markup=keyboard, parse_mode='Markdown')
            else:
                await update.message.reply_text(response, parse_mode='Markdown')
        else:
            await update.edit_message_text(response, parse_mode='Markdown')

    async def handle_events_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–±—ã—Ç–∏–π"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        if not data.startswith("view_events_"):
            return
            
        user_id = str(query.from_user.id)
        
        user_channels = await self.channel_manager.get_user_channels(user_id, context.bot)
        
        if not user_channels:
            await query.edit_message_text("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –æ–±—â–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ —Å –±–æ—Ç–æ–º.")
            return
        
        context.user_data['user_channels'] = user_channels
        
        channel_arg = data.replace("view_events_", "")
        
        if channel_arg == "all":
            await self._show_all_events_callback(update, context, user_channels)
        else:
            if channel_arg in user_channels:
                await self._show_events_for_channel_callback(update, context, channel_arg, user_channels)
            else:
                await query.edit_message_text("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    async def _show_events_for_channel_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE, channel_id: str, user_channels: Dict):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∫–∞–Ω–∞–ª–∞ (callback –≤–µ—Ä—Å–∏—è)"""
        query = update.callback_query
        response = await self._build_events_response(user_channels, context.bot, show_all=False, channel_id=channel_id)
        keyboard = await self._build_channels_keyboard(user_channels, context.bot, current_channel=channel_id)
        
        await query.edit_message_text(response, reply_markup=keyboard, parse_mode='Markdown')

    async def _show_all_events_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_channels: Dict):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–æ–±—ã—Ç–∏—è (callback –≤–µ—Ä—Å–∏—è)"""
        query = update.callback_query
        response = await self._build_events_response(user_channels, context.bot, show_all=True)
        keyboard = await self._build_channels_keyboard(user_channels, context.bot, current_channel=None)
        
        await query.edit_message_text(response, reply_markup=keyboard, parse_mode='Markdown')

    async def _build_events_response(self, user_channels: Dict, bot, show_all: bool = True, channel_id: str = None) -> str:
        """–°—Ç—Ä–æ–∏—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–æ–±—ã—Ç–∏–π"""
        events = self.data_manager.load_events()
        today = datetime.now().date()
        
        filtered_events = self._filter_and_prepare_events(events, user_channels, today, show_all, channel_id)
        
        if not filtered_events:
            return "üì≠ –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è –≤–∞—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤." if show_all else "üì≠ –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞."
        
        sorted_events = self._sort_events(filtered_events, show_all)
        
        return await self._format_events_response(sorted_events, show_all, today)

    async def _format_events_response(self, events: List[Dict], show_all: bool, today: datetime.date) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏—è –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç"""
        if show_all:
            response = "üëÅÔ∏è **–í—Å–µ —Å–æ–±—ã—Ç–∏—è**\n"
        else:
            response = "üì¢ **–°–æ–±—ã—Ç–∏—è –∫–∞–Ω–∞–ª–∞**\n"
        
        if not events:
            return response + "üì≠ –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π."
        
        current_date = None
        
        for event in events:
            event_date = event.get('next_date')
            if not event_date:
                continue
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–∞—Ç—ã –ø—Ä–∏ —Å–º–µ–Ω–µ
            if event_date != current_date:
                current_date = event_date
                formatted_date = event.get('display_date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞')
                formatted_date = DateUtils.format_date_with_weekday(formatted_date) if formatted_date != '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞' else formatted_date
                if event_date == today:
                    response += f"\nüéØ **–°–µ–≥–æ–¥–Ω—è:**\n"
                else:
                    response += f"\n**{formatted_date}:**\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏
            event_type_icon = "üî∏" if event['event_type'] == 'yearly' else "üîπ"
            pinned_status = "üìå" if event.get('pinned_message_id') else ""
            response += f"  {event_type_icon} {event['description']} {pinned_status}\n"
        
        return response
        
    def _filter_and_prepare_events(self, events: Dict, user_channels: Dict, today: datetime.date, 
                                show_all: bool, channel_id: str = None) -> List[Dict]:
        """–§–∏–ª—å—Ç—Ä—É–µ—Ç –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
        filtered_events = []
        user_channel_ids = set(user_channels.keys())
        
        for channel_id_key, channel_data in events.items():
            if not show_all and channel_id_key != channel_id:
                continue
            if show_all and channel_id_key not in user_channel_ids:
                continue
            
            for storage_key, event_list in channel_data['events'].items():
                for event in event_list:
                    next_date = self.event_manager.calculate_next_date(storage_key, event['event_type'])
                    if next_date and next_date >= today:
                        event_with_channel = event.copy()
                        event_with_channel['channel_id'] = channel_id_key
                        event_with_channel['channel_name'] = channel_data['channel_name']
                        event_with_channel['next_date'] = next_date
                        event_with_channel['display_date'] = next_date.strftime("%d.%m.%Y")
                        filtered_events.append(event_with_channel)
        
        return filtered_events
    
    def _sort_events(self, events: List[Dict], show_all: bool) -> List[Dict]:
        """–°–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏—è"""
        if show_all:
            return sorted(events, key=lambda x: (x.get('next_date', datetime.max.date()), x['channel_name']))
        else:
            return sorted(events, key=lambda x: x.get('next_date', datetime.max.date()))

    async def _format_events_response(self, events: List[Dict], show_all: bool, today: datetime.date) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏—è –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç"""
        if show_all:
            response = "üëÅÔ∏è **–í—Å–µ —Å–æ–±—ã—Ç–∏—è**\n"
        else:
            response = "üì¢ **–°–æ–±—ã—Ç–∏—è –∫–∞–Ω–∞–ª–∞**\n"
        
        if not events:
            return response + "üì≠ –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π."
        
        current_date = None
        
        for event in events:
            event_date = event.get('next_date')
            if not event_date:
                continue
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–∞—Ç—ã –ø—Ä–∏ —Å–º–µ–Ω–µ
            if event_date != current_date:
                current_date = event_date
                formatted_date = event.get('display_date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞')
                formatted_date = DateUtils.format_date_with_weekday(formatted_date) if formatted_date != '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞' else formatted_date
                if event_date == today:
                    response += f"\nüéØ **–°–µ–≥–æ–¥–Ω—è:**\n"
                else:
                    response += f"\n**{formatted_date}:**\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏
            event_type_icon = "üî∏" if event['event_type'] == 'yearly' else "üîπ"
            pinned_status = "üìå" if event.get('pinned_message_id') else ""
            response += f"  {event_type_icon} {event['description']} {pinned_status}\n"
        
        return response
    
    async def _build_channels_keyboard(self, user_channels: Dict, bot, current_channel: str = None) -> Optional[InlineKeyboardMarkup]:
        """–°—Ç—Ä–æ–∏—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫–∞–Ω–∞–ª–∞–º"""
        if len(user_channels) <= 1:
            return None
        
        keyboard = []
        
        if current_channel:
            user_channels_list = list(user_channels.keys())
            current_index = user_channels_list.index(current_channel)
            
            nav_buttons = []
            if current_index > 0:
                prev_channel = user_channels_list[current_index - 1]
                prev_name = user_channels[prev_channel]['name']
                nav_buttons.append(InlineKeyboardButton(f"‚Üê {prev_name}", callback_data=f"view_events_{prev_channel}"))
            
            if current_index < len(user_channels_list) - 1:
                next_channel = user_channels_list[current_index + 1]
                next_name = user_channels[next_channel]['name']
                nav_buttons.append(InlineKeyboardButton(f"{next_name} ‚Üí", callback_data=f"view_events_{next_channel}"))
            
            if nav_buttons:
                keyboard.append(nav_buttons)
            
            keyboard.append([InlineKeyboardButton("üëÅÔ∏è –í—Å–µ —Å–æ–±—ã—Ç–∏—è", callback_data="view_events_all")])
        
        else:
            for chat_id, channel_info in user_channels.items():
                channel_name = channel_info['name']
                keyboard.append([InlineKeyboardButton(f"üì¢ {channel_name}", callback_data=f"view_events_{chat_id}")])
        
        return InlineKeyboardMarkup(keyboard) if keyboard else None

    async def delete_event_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
        user_id = str(update.effective_user.id)
        
        user_channels = await self.channel_manager.get_user_channels(user_id, context.bot)
        
        if not user_channels:
            await update.message.reply_text("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –æ–±—â–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ —Å –±–æ—Ç–æ–º.")
            return
        
        context.user_data['user_channels'] = user_channels
        
        markup = self.calendar.create_calendar()
        await update.message.reply_text("üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)
        context.user_data['mode'] = 'deleting'
    
    async def _handle_delete_calendar_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π"""
        query = update.callback_query
        
        if query.data.startswith("calendar_day_") or query.data == "calendar_today":
            await self._handle_delete_date_selection(update, context)
        elif query.data.startswith("calendar_nav_"):
            await self._handle_calendar_navigation(update, context)
    
    async def _handle_delete_date_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
        query = update.callback_query
        
        if query.data == "calendar_today":
            date_obj = datetime.now()
        else:
            date_str = query.data.replace("calendar_day_", "")
            date_obj = datetime.strptime(date_str, "%Y-%m-%d")
        
        formatted_date = date_obj.strftime("%d.%m.%Y")
        date_str = date_obj.strftime("%Y-%m-%d")
        
        user_id = str(query.from_user.id)
        events_on_date = await self._get_events_for_date(date_str, user_id, context.bot)
        
        if not events_on_date:
            await query.edit_message_text(f"üì≠ –ù–∞ {formatted_date} –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            context.user_data.pop('mode', None)
            return
        
        keyboard = []
        for event in events_on_date:
            event_description = event['description']
            if len(event_description) > 30:
                event_description = event_description[:27] + "..."
            
            event_type_icon = "üî∏" if event['event_type'] == 'yearly' else "üîπ"
            button_text = f"{event_type_icon} {event_description} ({event['channel_name']})"
            
            keyboard.append([InlineKeyboardButton(button_text, callback_data=f"delete_confirm_{event['id']}")])
        
        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ", callback_data="delete_cancel")])
        
        await query.edit_message_text(
            f"üóëÔ∏è –°–æ–±—ã—Ç–∏—è –Ω–∞ {formatted_date}:\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    async def _get_events_for_date(self, date_str: str, user_id: str, bot) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É –∏–∑ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
        events = self.data_manager.load_events()
        
        user_channels = await self.channel_manager.get_user_channels(user_id, bot)
        user_channel_ids = set(user_channels.keys())
        
        events_on_date = []
        
        for channel_id, channel_data in events.items():
            if channel_id not in user_channel_ids:
                continue
                
            if date_str in channel_data['events']:
                for event in channel_data['events'][date_str]:
                    event_with_channel = event.copy()
                    event_with_channel['channel_id'] = channel_id
                    event_with_channel['channel_name'] = channel_data['channel_name']
                    events_on_date.append(event_with_channel)
            
            date_parts = date_str.split('-')
            yearly_key = f"yearly_{date_parts[1]}-{date_parts[2]}"
            if yearly_key in channel_data['events']:
                for event in channel_data['events'][yearly_key]:
                    event_with_channel = event.copy()
                    event_with_channel['channel_id'] = channel_id
                    event_with_channel['channel_name'] = channel_data['channel_name']
                    events_on_date.append(event_with_channel)
        
        return events_on_date
    
    async def handle_delete_confirmation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        if data.startswith("delete_confirm_"):
            event_id = data.replace("delete_confirm_", "")
            user_id = str(query.from_user.id)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
            events = self.data_manager.load_events()
            event_info = None
            for channel_id, channel_data in events.items():
                for date_key, event_list in channel_data['events'].items():
                    for event in event_list:
                        if event['id'] == event_id:
                            event_info = event
                            break
                    if event_info:
                        break
                if event_info:
                    break
            
            success = await self._delete_event_by_id(event_id, user_id, context.bot)
            
            if success:
                if event_info and event_info.get('pinned_message_id'):
                    await query.edit_message_text("‚úÖ –°–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–æ! üìå")
                else:
                    await query.edit_message_text("‚úÖ –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!")
            else:
                await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ.")
            
            context.user_data.pop('mode', None)
            
        elif data == "delete_cancel":
            await query.edit_message_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            context.user_data.pop('mode', None)

    async def _delete_event_by_id(self, event_id: str, user_id: str, bot) -> bool:
        """–£–¥–∞–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –ø–æ ID –∏–∑ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ –æ—Ç–∫—Ä–µ–ø–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        events = self.data_manager.load_events()
        
        user_channels = await self.channel_manager.get_user_channels(user_id, bot)
        user_channel_ids = set(user_channels.keys())
        
        # –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Ö–æ–¥–∏–º —Å–æ–±—ã—Ç–∏–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        event_to_delete = None
        channel_id_to_delete = None
        
        for channel_id, channel_data in events.items():
            for date_key in list(channel_data['events'].keys()):
                for i, event in enumerate(channel_data['events'][date_key]):
                    if (event['id'] == event_id and 
                        (event['created_by'] == user_id or channel_id in user_channel_ids)):
                        event_to_delete = event
                        channel_id_to_delete = channel_id
                        break
                if event_to_delete:
                    break
            if event_to_delete:
                break
        
        if not event_to_delete:
            return False
        
        # –û—Ç–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ
        pinned_message_id = event_to_delete.get('pinned_message_id')
        if pinned_message_id:
            try:
                permissions = await ChannelManager.check_bot_permissions(channel_id_to_delete, bot)
                if permissions['can_pin_messages']:
                    await bot.unpin_chat_message(
                        chat_id=channel_id_to_delete,
                        message_id=pinned_message_id
                    )
                    logger.info(f"üìå –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–æ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: {event_id}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: {e}")
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        success = EventManager.delete_event_by_id(events, event_id, user_id, user_channel_ids)
        if success:
            return self.data_manager.save_events(events)
        return False
    
    async def cancel_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω—ã"""
        if (context.user_data.get('waiting_for_event_description') or 
            context.user_data.get('waiting_for_channel_selection')):
            
            self.clear_event_context(context)
            await update.message.reply_text("‚ùå –¢–µ–∫—É—â–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        else:
            await update.message.reply_text("‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.")

    async def my_channels_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–Ω–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏)"""
        user_id = str(update.effective_user.id)
        
        user_channels = await self.channel_manager.get_user_channels(user_id, context.bot)
        
        if not user_channels:
            await update.message.reply_text(
                "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –æ–±—â–∏—Ö –∫–∞–Ω–∞–ª–æ–≤/–≥—Ä—É–ø–ø —Å –±–æ—Ç–æ–º.\n\n"
                "üí° –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:\n"
                "1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É\n"
                "2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —Ç–æ–∂–µ —É—á–∞—Å—Ç–Ω–∏–∫ —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã\n"
                "3. –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∏—Ç –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É!"
            )
            return
        
        response = "üì¢ –í–∞—à–∏ –∫–∞–Ω–∞–ª—ã –∏ –≥—Ä—É–ø–ø—ã:\n\n"
        for chat_id, channel_info in user_channels.items():
            success, current_title, _ = await self.channel_manager.get_channel_info(chat_id, context.bot)
            status_icon = "‚úÖ" if success else "‚ö†Ô∏è"
            status_text = " (–∞–∫—Ç–∏–≤–µ–Ω)" if success else " (–≤–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º)"
            channel_name = current_title if success else channel_info['name']
            response += f"{status_icon} {channel_name}{status_text}\n\n"

        response += "üí° –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤!"
        await update.message.reply_text(response)

    def clear_event_context(self, context: ContextTypes.DEFAULT_TYPE):
        """–û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
        keys_to_remove = [
            'waiting_for_event_description', 'selected_date', 
            'selected_channel', 'waiting_for_channel_selection',
            'event_type', 'mode', 'deleting_event'
        ]
        for key in keys_to_remove:
            context.user_data.pop(key, None)